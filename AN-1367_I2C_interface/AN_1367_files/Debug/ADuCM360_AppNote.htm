<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Debug\ADuCM360_AppNote.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Debug\ADuCM360_AppNote.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5.03 [Build 76]: Last Updated: Sun Jun 14 19:14:21 2015
<BR><P>
<H3>Maximum Stack Usage =        596 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; I2C_Test &rArr; I2C_MemoryGet &rArr; I2C_Read_ADE7953 &rArr; printf &rArr; sprintf &rArr; number &rArr; do_div &rArr; unsigned_divide
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[70]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[4]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">NMI_Handler</a><BR>
 <LI><a href="#[5]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">HardFault_Handler</a><BR>
 <LI><a href="#[6]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">MemManage_Handler</a><BR>
 <LI><a href="#[7]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">BusFault_Handler</a><BR>
 <LI><a href="#[8]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">UsageFault_Handler</a><BR>
 <LI><a href="#[9]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">SVC_Handler</a><BR>
 <LI><a href="#[a]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">DebugMon_Handler</a><BR>
 <LI><a href="#[b]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b]">PendSV_Handler</a><BR>
 <LI><a href="#[c]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c]">SysTick_Handler</a><BR>
 <LI><a href="#[19]">ADC0_ISR</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[19]">ADC0_ISR</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[19]">ADC0_ISR</a> from aducm360startup.o(.text) referenced from aducm360startup.o(RESET)
 <LI><a href="#[1a]">ADC1_ISR</a> from aducm360startup.o(.text) referenced from aducm360startup.o(RESET)
 <LI><a href="#[7]">BusFault_Handler</a> from aducm360startup.o(.text) referenced from aducm360startup.o(RESET)
 <LI><a href="#[2c]">DMA_ADC0_Int_Handler</a> from aducm360startup.o(.text) referenced from aducm360startup.o(RESET)
 <LI><a href="#[2d]">DMA_ADC1_Int_Handler</a> from aducm360startup.o(.text) referenced from aducm360startup.o(RESET)
 <LI><a href="#[2b]">DMA_DAC_Out_Int_Handler</a> from aducm360startup.o(.text) referenced from aducm360startup.o(RESET)
 <LI><a href="#[22]">DMA_Err_Int_Handler</a> from aducm360startup.o(.text) referenced from aducm360startup.o(RESET)
 <LI><a href="#[2a]">DMA_I2C0_MRX_Int_Handler</a> from aducm360startup.o(.text) referenced from aducm360startup.o(RESET)
 <LI><a href="#[29]">DMA_I2C0_MTX_Int_Handler</a> from aducm360startup.o(.text) referenced from aducm360startup.o(RESET)
 <LI><a href="#[28]">DMA_I2C0_SRX_Int_Handler</a> from aducm360startup.o(.text) referenced from aducm360startup.o(RESET)
 <LI><a href="#[27]">DMA_I2C0_STX_Int_Handler</a> from aducm360startup.o(.text) referenced from aducm360startup.o(RESET)
 <LI><a href="#[2e]">DMA_SINC2_Int_Handler</a> from aducm360startup.o(.text) referenced from aducm360startup.o(RESET)
 <LI><a href="#[24]">DMA_SPI1_RX_Int_Handler</a> from aducm360startup.o(.text) referenced from aducm360startup.o(RESET)
 <LI><a href="#[23]">DMA_SPI1_TX_Int_Handler</a> from aducm360startup.o(.text) referenced from aducm360startup.o(RESET)
 <LI><a href="#[26]">DMA_UART_RX_Int_Handler</a> from aducm360startup.o(.text) referenced from aducm360startup.o(RESET)
 <LI><a href="#[25]">DMA_UART_TX_Int_Handler</a> from aducm360startup.o(.text) referenced from aducm360startup.o(RESET)
 <LI><a href="#[a]">DebugMon_Handler</a> from aducm360startup.o(.text) referenced from aducm360startup.o(RESET)
 <LI><a href="#[e]">External_ISR0</a> from aducm360startup.o(.text) referenced from aducm360startup.o(RESET)
 <LI><a href="#[f]">External_ISR1</a> from aducm360startup.o(.text) referenced from aducm360startup.o(RESET)
 <LI><a href="#[10]">External_ISR2</a> from aducm360startup.o(.text) referenced from aducm360startup.o(RESET)
 <LI><a href="#[11]">External_ISR3</a> from aducm360startup.o(.text) referenced from aducm360startup.o(RESET)
 <LI><a href="#[12]">External_ISR4</a> from aducm360startup.o(.text) referenced from aducm360startup.o(RESET)
 <LI><a href="#[13]">External_ISR5</a> from aducm360startup.o(.text) referenced from aducm360startup.o(RESET)
 <LI><a href="#[14]">External_ISR6</a> from aducm360startup.o(.text) referenced from aducm360startup.o(RESET)
 <LI><a href="#[15]">External_ISR7</a> from aducm360startup.o(.text) referenced from aducm360startup.o(RESET)
 <LI><a href="#[1c]">Flash_Ctrl_ISR</a> from aducm360startup.o(.text) referenced from aducm360startup.o(RESET)
 <LI><a href="#[5]">HardFault_Handler</a> from aducm360startup.o(.text) referenced from aducm360startup.o(RESET)
 <LI><a href="#[21]">I2C0_Master_Int_Handler</a> from aducm360_test_lib.o(.text) referenced from aducm360startup.o(RESET)
 <LI><a href="#[20]">I2C0_Slave_Int_Handler</a> from aducm360startup.o(.text) referenced from aducm360startup.o(RESET)
 <LI><a href="#[6]">MemManage_Handler</a> from aducm360startup.o(.text) referenced from aducm360startup.o(RESET)
 <LI><a href="#[4]">NMI_Handler</a> from aducm360startup.o(.text) referenced from aducm360startup.o(RESET)
 <LI><a href="#[30]">PWM0_Int_Handler</a> from aducm360startup.o(.text) referenced from aducm360startup.o(RESET)
 <LI><a href="#[2f]">PWMTRIP_Int_Handler</a> from aducm360startup.o(.text) referenced from aducm360startup.o(RESET)
 <LI><a href="#[b]">PendSV_Handler</a> from aducm360startup.o(.text) referenced from aducm360startup.o(RESET)
 <LI><a href="#[3]">Reset_Handler</a> from aducm360startup.o(.text) referenced from aducm360startup.o(RESET)
 <LI><a href="#[1b]">SINC2_ISR</a> from aducm360startup.o(.text) referenced from aducm360startup.o(RESET)
 <LI><a href="#[1e]">SPI0_Int_Handler</a> from aducm360startup.o(.text) referenced from aducm360startup.o(RESET)
 <LI><a href="#[1f]">SPI1_Int_Handler</a> from aducm360startup.o(.text) referenced from aducm360startup.o(RESET)
 <LI><a href="#[9]">SVC_Handler</a> from aducm360startup.o(.text) referenced from aducm360startup.o(RESET)
 <LI><a href="#[c]">SysTick_Handler</a> from aducm360startup.o(.text) referenced from aducm360startup.o(RESET)
 <LI><a href="#[17]">Timer0_ISR</a> from aducm360startup.o(.text) referenced from aducm360startup.o(RESET)
 <LI><a href="#[18]">Timer1_ISR</a> from aducm360startup.o(.text) referenced from aducm360startup.o(RESET)
 <LI><a href="#[1d]">UART_ISR</a> from aducm360_test_lib.o(.text) referenced from aducm360startup.o(RESET)
 <LI><a href="#[8]">UsageFault_Handler</a> from aducm360startup.o(.text) referenced from aducm360startup.o(RESET)
 <LI><a href="#[d]">Wake_UpTimer_ISR</a> from aducm360startup.o(.text) referenced from aducm360startup.o(RESET)
 <LI><a href="#[16]">WatchDog_Timer_ISR</a> from aducm360startup.o(.text) referenced from aducm360startup.o(RESET)
 <LI><a href="#[33]">__main</a> from __main.o(!!!main) referenced from aducm360startup.o(.text)
 <LI><a href="#[32]">_get_lc_ctype</a> from lc_ctype_c.o(locale$$code) referenced from rt_ctype_table.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[33]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[34]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[36]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[73]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[74]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[75]"></a>__decompress</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[76]"></a>__decompress1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[77]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[3d]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[78]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[79]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000008))

<P><STRONG><a name="[37]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000D))
<BR><BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[7a]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[7b]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[7c]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))

<P><STRONG><a name="[39]"></a>__rt_lib_init_lc_ctype_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000010))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_ctype_2 &rArr; _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[7d]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[7e]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002A))

<P><STRONG><a name="[7f]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[80]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[81]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[82]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[83]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[84]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[85]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[86]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[87]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[88]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[89]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000031))

<P><STRONG><a name="[8a]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[8b]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[42]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[8c]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[8d]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[8e]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[8f]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[90]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))

<P><STRONG><a name="[91]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000B))

<P><STRONG><a name="[35]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[92]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[3a]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[3c]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[93]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[3e]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 596 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; I2C_Test &rArr; I2C_MemoryGet &rArr; I2C_Read_ADE7953 &rArr; printf &rArr; sprintf &rArr; number &rArr; do_div &rArr; unsigned_divide
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[94]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[71]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[41]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[95]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[43]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[3]"></a>Reset_Handler</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, aducm360startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> aducm360startup.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, aducm360startup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aducm360startup.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, aducm360startup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aducm360startup.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, aducm360startup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aducm360startup.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, aducm360startup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aducm360startup.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, aducm360startup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aducm360startup.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, aducm360startup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aducm360startup.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, aducm360startup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aducm360startup.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, aducm360startup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aducm360startup.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, aducm360startup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aducm360startup.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>ADC0_ISR</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, aducm360startup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_ISR
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_ISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aducm360startup.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>ADC1_ISR</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, aducm360startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> aducm360startup.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>DMA_ADC0_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, aducm360startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> aducm360startup.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>DMA_ADC1_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, aducm360startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> aducm360startup.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>DMA_DAC_Out_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, aducm360startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> aducm360startup.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>DMA_Err_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, aducm360startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> aducm360startup.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>DMA_I2C0_MRX_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, aducm360startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> aducm360startup.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>DMA_I2C0_MTX_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, aducm360startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> aducm360startup.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>DMA_I2C0_SRX_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, aducm360startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> aducm360startup.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>DMA_I2C0_STX_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, aducm360startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> aducm360startup.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>DMA_SINC2_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, aducm360startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> aducm360startup.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>DMA_SPI1_RX_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, aducm360startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> aducm360startup.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>DMA_SPI1_TX_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, aducm360startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> aducm360startup.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>DMA_UART_RX_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, aducm360startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> aducm360startup.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>DMA_UART_TX_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, aducm360startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> aducm360startup.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>External_ISR0</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, aducm360startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> aducm360startup.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>External_ISR1</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, aducm360startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> aducm360startup.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>External_ISR2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, aducm360startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> aducm360startup.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>External_ISR3</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, aducm360startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> aducm360startup.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>External_ISR4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, aducm360startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> aducm360startup.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>External_ISR5</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, aducm360startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> aducm360startup.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>External_ISR6</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, aducm360startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> aducm360startup.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>External_ISR7</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, aducm360startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> aducm360startup.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>Flash_Ctrl_ISR</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, aducm360startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> aducm360startup.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>I2C0_Slave_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, aducm360startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> aducm360startup.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>PWM0_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, aducm360startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> aducm360startup.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>PWMTRIP_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, aducm360startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> aducm360startup.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>SINC2_ISR</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, aducm360startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> aducm360startup.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>SPI0_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, aducm360startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> aducm360startup.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>SPI1_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, aducm360startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> aducm360startup.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>Timer0_ISR</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, aducm360startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> aducm360startup.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>Timer1_ISR</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, aducm360startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> aducm360startup.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>Wake_UpTimer_ISR</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, aducm360startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> aducm360startup.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>WatchDog_Timer_ISR</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, aducm360startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> aducm360startup.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, aducm360startup.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[46]"></a>putc</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, jongsulib_v2.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gets
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>

<P><STRONG><a name="[45]"></a>puts</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, jongsulib_v2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = puts
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putc
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gets
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>

<P><STRONG><a name="[48]"></a>unsigned_divide</STRONG> (Thumb, 160 bytes, Stack size 28 bytes, jongsulib_v2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = unsigned_divide
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_div
</UL>

<P><STRONG><a name="[47]"></a>do_div</STRONG> (Thumb, 26 bytes, Stack size 20 bytes, jongsulib_v2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = do_div &rArr; unsigned_divide
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned_divide
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;number
</UL>

<P><STRONG><a name="[49]"></a>number</STRONG> (Thumb, 142 bytes, Stack size 116 bytes, jongsulib_v2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = number &rArr; do_div &rArr; unsigned_divide
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_div
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprintf
</UL>

<P><STRONG><a name="[4a]"></a>sprintf</STRONG> (Thumb, 146 bytes, Stack size 48 bytes, jongsulib_v2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = sprintf &rArr; number &rArr; do_div &rArr; unsigned_divide
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;number
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>

<P><STRONG><a name="[4b]"></a>printf</STRONG> (Thumb, 36 bytes, Stack size 280 bytes, jongsulib_v2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 492<LI>Call Chain = printf &rArr; sprintf &rArr; number &rArr; do_div &rArr; unsigned_divide
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprintf
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_display
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Test
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MemoryGet
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MemorySet
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADE7953_Ex
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_ADE7953
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_ADE7953
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_menu_display
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemorySet
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryDump
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMemData
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_reg
</UL>

<P><STRONG><a name="[4c]"></a>write_reg</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, jongsulib_v2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 516<LI>Call Chain = write_reg &rArr; printf &rArr; sprintf &rArr; number &rArr; do_div &rArr; unsigned_divide
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Test
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemorySet
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_mask
</UL>

<P><STRONG><a name="[4e]"></a>read_reg</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, jongsulib_v2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Test
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_mask
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_mask
</UL>

<P><STRONG><a name="[96]"></a>set_bit</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, jongsulib_v2.o(.text), UNUSED)

<P><STRONG><a name="[97]"></a>clear_bit</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, jongsulib_v2.o(.text), UNUSED)

<P><STRONG><a name="[51]"></a>get_bit</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, jongsulib_v2.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll_on_reset
</UL>

<P><STRONG><a name="[4d]"></a>write_mask</STRONG> (Thumb, 30 bytes, Stack size 32 bytes, jongsulib_v2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_reg
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_reg
</UL>

<P><STRONG><a name="[4f]"></a>read_mask</STRONG> (Thumb, 14 bytes, Stack size 12 bytes, jongsulib_v2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_reg
</UL>

<P><STRONG><a name="[98]"></a>poll_on_set</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, jongsulib_v2.o(.text), UNUSED)

<P><STRONG><a name="[99]"></a>poll_on_set_limit</STRONG> (Thumb, 46 bytes, Stack size 28 bytes, jongsulib_v2.o(.text), UNUSED)

<P><STRONG><a name="[50]"></a>poll_on_reset</STRONG> (Thumb, 30 bytes, Stack size 20 bytes, jongsulib_v2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_bit
</UL>

<P><STRONG><a name="[68]"></a>hextoint</STRONG> (Thumb, 244 bytes, Stack size 0 bytes, jongsulib_v2.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Test
</UL>

<P><STRONG><a name="[53]"></a>getc</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, jongsulib_v2.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gets
</UL>

<P><STRONG><a name="[52]"></a>gets</STRONG> (Thumb, 86 bytes, Stack size 12 bytes, jongsulib_v2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gets &rArr; puts
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getc
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putc
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Test
</UL>

<P><STRONG><a name="[54]"></a>DispMemData</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, jongsulib_v2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 516<LI>Call Chain = DispMemData &rArr; printf &rArr; sprintf &rArr; number &rArr; do_div &rArr; unsigned_divide
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryDump
</UL>

<P><STRONG><a name="[55]"></a>stoi</STRONG> (Thumb, 154 bytes, Stack size 56 bytes, jongsulib_v2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = stoi &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MemoryGet
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MemorySet
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryDump_Sub
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemorySet
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryDump
</UL>

<P><STRONG><a name="[58]"></a>MemoryDump</STRONG> (Thumb, 332 bytes, Stack size 40 bytes, jongsulib_v2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 556<LI>Call Chain = MemoryDump &rArr; DispMemData &rArr; printf &rArr; sprintf &rArr; number &rArr; do_div &rArr; unsigned_divide
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tolower
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stoi
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMemData
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5d]"></a>MemorySet</STRONG> (Thumb, 514 bytes, Stack size 40 bytes, jongsulib_v2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 556<LI>Call Chain = MemorySet &rArr; write_reg &rArr; printf &rArr; sprintf &rArr; number &rArr; do_div &rArr; unsigned_divide
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tolower
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stoi
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_reg
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5e]"></a>MemoryDump_Sub</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, jongsulib_v2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tolower
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stoi
</UL>

<P><STRONG><a name="[5f]"></a>I2C_menu_display</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, aducm360_test_lib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 500<LI>Call Chain = I2C_menu_display &rArr; printf &rArr; sprintf &rArr; number &rArr; do_div &rArr; unsigned_divide
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Test
</UL>

<P><STRONG><a name="[62]"></a>I2cMRdCfg</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, aducm360_test_lib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2cMRdCfg
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_ADE7953
</UL>

<P><STRONG><a name="[61]"></a>I2cMWrCfg</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, aducm360_test_lib.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_ADE7953
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_ADE7953
</UL>

<P><STRONG><a name="[60]"></a>I2C_Read_ADE7953</STRONG> (Thumb, 186 bytes, Stack size 8 bytes, aducm360_test_lib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 500<LI>Call Chain = I2C_Read_ADE7953 &rArr; printf &rArr; sprintf &rArr; number &rArr; do_div &rArr; unsigned_divide
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2cMWrCfg
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2cMRdCfg
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MemoryGet
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADE7953_Ex
</UL>

<P><STRONG><a name="[63]"></a>I2C_Write_ADE7953</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, aducm360_test_lib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 500<LI>Call Chain = I2C_Write_ADE7953 &rArr; printf &rArr; sprintf &rArr; number &rArr; do_div &rArr; unsigned_divide
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2cMWrCfg
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MemorySet
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADE7953_Ex
</UL>

<P><STRONG><a name="[64]"></a>ADE7953_Ex</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, aducm360_test_lib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 516<LI>Call Chain = ADE7953_Ex &rArr; I2C_Write_ADE7953 &rArr; printf &rArr; sprintf &rArr; number &rArr; do_div &rArr; unsigned_divide
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_ADE7953
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_ADE7953
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Test
</UL>

<P><STRONG><a name="[65]"></a>I2C_MemorySet</STRONG> (Thumb, 622 bytes, Stack size 40 bytes, aducm360_test_lib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 540<LI>Call Chain = I2C_MemorySet &rArr; I2C_Write_ADE7953 &rArr; printf &rArr; sprintf &rArr; number &rArr; do_div &rArr; unsigned_divide
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tolower
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_ADE7953
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stoi
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Test
</UL>

<P><STRONG><a name="[66]"></a>I2C_MemoryGet</STRONG> (Thumb, 524 bytes, Stack size 48 bytes, aducm360_test_lib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 548<LI>Call Chain = I2C_MemoryGet &rArr; I2C_Read_ADE7953 &rArr; printf &rArr; sprintf &rArr; number &rArr; do_div &rArr; unsigned_divide
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tolower
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_ADE7953
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stoi
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Test
</UL>

<P><STRONG><a name="[67]"></a>I2C_Test</STRONG> (Thumb, 450 bytes, Stack size 48 bytes, aducm360_test_lib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 596<LI>Call Chain = I2C_Test &rArr; I2C_MemoryGet &rArr; I2C_Read_ADE7953 &rArr; printf &rArr; sprintf &rArr; number &rArr; do_div &rArr; unsigned_divide
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_display
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MemoryGet
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MemorySet
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADE7953_Ex
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_menu_display
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gets
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hextoint
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_reg
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_reg
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[21]"></a>I2C0_Master_Int_Handler</STRONG> (Thumb, 732 bytes, Stack size 8 bytes, aducm360_test_lib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C0_Master_Int_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aducm360startup.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>UART_ISR</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, aducm360_test_lib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_ISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aducm360startup.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>menu_display</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, aducm360_i2c_appnote.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 500<LI>Call Chain = menu_display &rArr; printf &rArr; sprintf &rArr; number &rArr; do_div &rArr; unsigned_divide
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Test
</UL>

<P><STRONG><a name="[3f]"></a>main</STRONG> (Thumb, 1100 bytes, Stack size 0 bytes, aducm360_i2c_appnote.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 596<LI>Call Chain = main &rArr; I2C_Test &rArr; I2C_MemoryGet &rArr; I2C_Read_ADE7953 &rArr; printf &rArr; sprintf &rArr; number &rArr; do_div &rArr; unsigned_divide
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_display
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Test
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemorySet
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryDump
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gets
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hextoint
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_reg
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[5a]"></a>tolower</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, tolower.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tolower &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MemoryGet
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MemorySet
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryDump_Sub
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemorySet
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryDump
</UL>

<P><STRONG><a name="[5c]"></a>atoi</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, atoi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MemoryGet
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MemorySet
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryDump_Sub
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemorySet
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryDump
</UL>

<P><STRONG><a name="[59]"></a>strchr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, strchr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MemoryGet
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MemorySet
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemorySet
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryDump
</UL>

<P><STRONG><a name="[5b]"></a>strcpy</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, strcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MemoryGet
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MemorySet
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemorySet
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryDump
</UL>

<P><STRONG><a name="[57]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stoi
</UL>

<P><STRONG><a name="[56]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stoi
</UL>

<P><STRONG><a name="[9a]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[9b]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[9c]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[9d]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[9e]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[9f]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[6a]"></a>__rt_ctype_table</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rt_ctype_table.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tolower
</UL>

<P><STRONG><a name="[6b]"></a>__aeabi_errno_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[a0]"></a>__errno$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[a1]"></a>__rt_errno_addr$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[6c]"></a>strtol</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, strtol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[a2]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[6f]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[a3]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[38]"></a>__rt_locale</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_locale_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>

<P><STRONG><a name="[6d]"></a>_strtoul</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, _strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[3b]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[6e]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[40]"></a>exit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[72]"></a>strcmp</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, strcmpv7m.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[44]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[a4]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[a5]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[a6]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[32]"></a>_get_lc_ctype</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_ctype_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_ctype_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_ctype_table.o(.text)
</UL><P>
<H3>
Local Symbols
</H3><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
