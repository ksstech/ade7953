; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--debug -c --asm -o.\debug\aducm360_i2c_appnote.o --depend=.\debug\aducm360_i2c_appnote.d --cpu=Cortex-M3 --apcs=interwork -O0 --omf_browse=.\debug\aducm360_i2c_appnote.crf ADuCM360_I2C_AppNote.c]
        THUMB
        REQUIRE8
        PRESERVE8

        AREA ||.text||, CODE, READONLY, ALIGN=2

menu_display PROC
        PUSH     {r4,lr}
        ADR      r0,|L1.348|
        BL       printf
        ADR      r0,|L1.412|
        BL       printf
        ADR      r0,|L1.476|
        BL       printf
        ADR      r0,|L1.540|
        BL       printf
        ADR      r0,|L1.412|
        BL       printf
        ADR      r0,|L1.604|
        BL       printf
        ADR      r0,|L1.668|
        BL       printf
        ADR      r0,|L1.732|
        BL       printf
        ADR      r0,|L1.412|
        BL       printf
        ADR      r0,|L1.796|
        BL       printf
        ADR      r0,|L1.412|
        BL       printf
        ADR      r0,|L1.348|
        BL       printf
        ADR      r0,|L1.860|
        BL       printf
        ADR      r0,|L1.924|
        BL       printf
        ADR      r0,|L1.988|
        BL       printf
        ADR      r0,|L1.1052|
        BL       printf
        POP      {r4,pc}
        ENDP

main PROC
        MOV      r1,#0x20000
        LDR      r0,|L1.1116|
        BL       write_reg
        MOVS     r0,#0
        LDR      r1,|L1.1120|
        LDR      r1,[r1,#0]  ; pT3CON
        STRH     r0,[r1,#0]
        MOV      r0,#0x3f7
        LDR      r1,|L1.1124|
        LDR      r1,[r1,#0]  ; pCLKDIS
        STRH     r0,[r1,#0]
        MOVS     r0,#0
        LDR      r1,|L1.1128|
        LDR      r1,[r1,#0]  ; pCLKSYSDIV
        STRH     r0,[r1,#0]
        LDR      r1,|L1.1132|
        LDR      r1,[r1,#0]  ; pCLKCON0
        STRH     r0,[r1,#0]
        LDR      r1,|L1.1136|
        LDR      r1,[r1,#0]  ; pCLKCON1
        STRH     r0,[r1,#0]
        LDR      r1,|L1.1140|
        LDR      r1,[r1,#0]  ; pCOMCON
        STRB     r0,[r1,#0]
        MOVS     r0,#0x3c
        LDR      r1,|L1.1144|
        LDR      r1,[r1,#0]  ; pGP0CON
        STRH     r0,[r1,#0]
        MOVS     r0,#2
        LDR      r1,|L1.1148|
        LDR      r1,[r1,#0]  ; pCOMDIV
        STRH     r0,[r1,#0]
        MOV      r0,#0x915c
        LDR      r1,|L1.1152|
        LDR      r1,[r1,#0]  ; pCOMFBR
        STRH     r0,[r1,#0]
        MOVS     r0,#0
        LDR      r1,|L1.1156|
        LDR      r1,[r1,#0]  ; pCOMIEN
        STRB     r0,[r1,#0]
        MOVS     r0,#3
        LDR      r1,|L1.1160|
        LDR      r1,[r1,#0]  ; pCOMLCR
        STRB     r0,[r1,#0]
        LDR      r1,|L1.1156|
        LDR      r1,[r1,#0]  ; pCOMIEN
        STRB     r0,[r1,#0]
        MOV      r1,#0x20000
        LDR      r0,|L1.1116|
        BL       write_reg
        B        |L1.1198|
|L1.214|
        ADR      r0,|L1.1164|
        BL       printf
        LDR      r0,|L1.1176|
        BL       gets
        MOV      r6,r0
        LDR      r0,|L1.1176|
        LDRB     r4,[r0,#0]  ; szTemp
        CMP      r4,#0x6d
        BNE      |L1.240|
        MOV      r5,r4
        B        |L1.328|
|L1.240|
        CMP      r4,#0xa
        BNE      |L1.248|
        MOVS     r5,#0x72
        B        |L1.328|
|L1.248|
        CMP      r4,#0x41
        BLT      |L1.262|
        CMP      r4,#0x5a
        BGT      |L1.262|
        ADD      r0,r4,#0x20
        B        |L1.272|
|L1.262|
        CMP      r4,#0x67
        BNE      |L1.270|
        MOVS     r0,#1
        B        |L1.272|
|L1.270|
        MOVS     r0,#0
|L1.272|
        CBZ      r0,|L1.284|
        LDR      r0,|L1.1176|
        BL       MemoryDump
        MOVS     r5,#0x72
        B        |L1.328|
|L1.284|
        CMP      r4,#0x41
        BLT      |L1.298|
        CMP      r4,#0x5a
        BGT      |L1.298|
        ADD      r0,r4,#0x20
        B        |L1.308|
|L1.298|
        CMP      r4,#0x73
        BNE      |L1.306|
        MOVS     r0,#1
        B        |L1.308|
|L1.306|
        MOVS     r0,#0
|L1.308|
        CBZ      r0,|L1.320|
        LDR      r0,|L1.1176|
        BL       MemorySet
        MOVS     r5,#0x72
        B        |L1.328|
|L1.320|
        LDR      r0,|L1.1176|
        BL       hextoint
        UXTB     r5,r0
|L1.328|
        MOVS     r0,#0
        LDR      r1,|L1.1176|
        STRB     r0,[r1,#0]
        CMP      r5,#1
        BEQ      |L1.344|
        CMP      r5,#0x6d
        BNE      |L1.346|
        B        |L1.1186|
|L1.344|
        B        |L1.1180|
|L1.346|
        B        |L1.1192|
|L1.348|
        DCB      "*******************************************************"
        DCB      "******\n",0
        DCB      0
|L1.412|
        DCB      "**                                                     "
        DCB      "      \n",0
        DCB      0
|L1.476|
        DCB      "**   Note :                                            "
        DCB      "      \n",0
        DCB      0
|L1.540|
        DCB      "**   ADuCM360 EVM board Test Program                   "
        DCB      "    \n",0
        DCB      0
        DCB      0
        DCB      0
|L1.604|
        DCB      "** Usage :                                             "
        DCB      "      \n",0
        DCB      0
|L1.668|
        DCB      "** LoveJongSu]set addr val                             "
        DCB      "      \n",0
        DCB      0
|L1.732|
        DCB      "** LoveJongSu]get addr                                 "
        DCB      "      \n",0
        DCB      0
|L1.796|
        DCB      "**                       2014, 11, 11  By Lim Jong Su  "
        DCB      "      \n",0
        DCB      0
|L1.860|
        DCB      "*           1.  I2C Test                               "
        DCB      "     *\n",0
        DCB      0
|L1.924|
        DCB      "**                                                     "
        DCB      "     *\n",0
        DCB      0
|L1.988|
        DCB      "            ",162,209," m.  Main Menu display          "
        DCB      "              \n",0
        DCB      0
        DCB      0
|L1.1052|
        DCB      "*******************************************************"
        DCB      "****\n\n",0
        DCB      0
        DCB      0
|L1.1116|
        DCD      0xe000e100
|L1.1120|
        DCD      pT3CON
|L1.1124|
        DCD      pCLKDIS
|L1.1128|
        DCD      pCLKSYSDIV
|L1.1132|
        DCD      pCLKCON0
|L1.1136|
        DCD      pCLKCON1
|L1.1140|
        DCD      pCOMCON
|L1.1144|
        DCD      pGP0CON
|L1.1148|
        DCD      pCOMDIV
|L1.1152|
        DCD      pCOMFBR
|L1.1156|
        DCD      pCOMIEN
|L1.1160|
        DCD      pCOMLCR
|L1.1164|
        DCB      "LoveJongSu]",0
|L1.1176|
        DCD      szTemp
|L1.1180|
        BL       I2C_Test
        B        |L1.1194|
|L1.1186|
        BL       menu_display
        B        |L1.1194|
|L1.1192|
        NOP      
|L1.1194|
        NOP      
        ANDS     r6,r6,r6
|L1.1198|
        B        |L1.214|
        ENDP


        AREA ||.arm_vfe_header||, DATA, READONLY, NOALLOC, ALIGN=2

        DCD      0x00000000

__ARM_use_no_argv EQU 0

        EXPORT __ARM_use_no_argv
        EXPORT menu_display [CODE]
        EXPORT main [CODE]

        IMPORT ||Lib$$Request$$armlib|| [CODE,WEAK]
        IMPORT printf [CODE]
        IMPORT write_reg [CODE]
        IMPORT gets [CODE]
        IMPORT MemoryDump [CODE]
        IMPORT MemorySet [CODE]
        IMPORT hextoint [CODE]
        IMPORT I2C_Test [CODE]
        IMPORT pT3CON [DATA]
        IMPORT pCLKDIS [DATA]
        IMPORT pCLKSYSDIV [DATA]
        IMPORT pCLKCON0 [DATA]
        IMPORT pCLKCON1 [DATA]
        IMPORT pCOMCON [DATA]
        IMPORT pGP0CON [DATA]
        IMPORT pCOMDIV [DATA]
        IMPORT pCOMFBR [DATA]
        IMPORT pCOMIEN [DATA]
        IMPORT pCOMLCR [DATA]
        IMPORT szTemp [DATA]

        ATTR FILESCOPE
        ATTR SETVALUE Tag_ABI_PCS_wchar_t,2
        ATTR SETVALUE Tag_ABI_enum_size,1
        ATTR SETVALUE Tag_ABI_optimization_goals,6
        ATTR SETSTRING Tag_conformance,"2.06"
        ATTR SETVALUE AV,18,1

        ASSERT {ENDIAN} = "little"
        ASSERT {INTER} = {TRUE}
        ASSERT {ROPI} = {FALSE}
        ASSERT {RWPI} = {FALSE}
        ASSERT {IEEE_FULL} = {FALSE}
        ASSERT {IEEE_PART} = {FALSE}
        ASSERT {IEEE_JAVA} = {FALSE}
        END
